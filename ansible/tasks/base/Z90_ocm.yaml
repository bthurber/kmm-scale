---
  - name: Create patch for CoreDNS for the clusters
    copy:
      dest: /root/coredns.yaml
      mode: 0644
      content: |
        apiVersion: v1
        data:
          Corefile: |
            .:53 {
                errors
                health {
                  lameduck 5s
                }
                ready
                kubernetes cluster.local in-addr.arpa ip6.arpa {
                  pods insecure
                  fallthrough in-addr.arpa ip6.arpa
                  ttl 30
                }
                prometheus :9153
                forward . /etc/resolv.conf {
                  max_concurrent 1000
                }

                hosts custom.hosts hub-control-plane {
                  {{ hubip }} hub-control-plane  fallthrough
                }
                cache 30
                loop
                reload
                loadbalance
            }
        kind: ConfigMap
        metadata:
          name: coredns
          namespace: kube-system

  - name: Patch CoreDNS for the clusters
    shell: kubectl apply --context kind-cluster{{item}} -f /root/coredns.yaml
    with_sequence: start=0 end={{ maxspokes }}
    ignore_errors: true

  - name: Deploy OCM on the hub
    block:
      - name: Report on Hub
        debug:
          msg: "I am HUUUUUUUUUUB"

      - name: Set kubectl context for HUB
        shell: kubectl  config use-context kind-hub

      - name: Deploy OCM on the Hub
        shell: clusteradm init --wait

      - name: Deploy OCM  app-lifecycle Addon
        shell: clusteradm install hub-addon --names application-manager

      - name: Deploy OCM  Governance policty Addon
        shell: clusteradm install hub-addon --names governance-policy-framework

      - name: Get Hub OCM token
        shell: clusteradm get token --context kind-hub 2>&1|grep ^token|cut -d "=" -f 2-
        register: tokenoutput

      - name: Set fact for hub token
        set_fact:
          hubtoken: "{{ tokenoutput.stdout_lines|join('') }}"
        delegate_to: "{{ item }}"
        with_items: "{{ play_hosts }}"
        run_once: yes
    when: hub == True

  - name: Request to join spokes to HUB
    shell: clusteradm join --context kind-cluster{{item}} --hub-token {{hubtoken}} --hub-apiserver "https://hub-control-plane:{{hubport}}" --wait --cluster-name
      "cluster{{item}}.{{ inventory_hostname }}" #--force-internal-endpoint-lookup
    with_sequence: start=0 end={{ maxspokes }}
    ignore_errors: true

  - name: Pause for 3 minutes to let hosts to issue CSR
    pause:
      minutes: 3

  - name: Deploy OCM on the hub
    block:
      - name: Report on Hub
        debug:
          msg: "I am HUUUUUUUUUUB"

      - name: Set kubectl context for HUB
        shell: kubectl  config use-context kind-hub

    # - name: Approve clusters joining from hub
    #   shell: clusteradm accept --clusters kind-spoke --context ${CTX_HUB_CLUSTER}
    #   with_sequence: start=0 end={{ maxspokes }}
    when: hub == True
